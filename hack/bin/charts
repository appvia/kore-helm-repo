#!/bin/sh

updatechart() {
    chart=$1
    version=$2
    chartName=$(basename ${chart})
    echo "    updating ${chart} at ${version}..."
    if [ ${version} != '' ]; then
      versionFlag="--version ${version}"
    fi
    helm pull ${chart} -d ./charts-stage --untar ${versionFlag}
    rm -fr ./charts-stage/${chartName}-${version}
    # Support a single chart at multiple different versions
    mv ./charts-stage/${chartName} ./charts-stage/${chartName}-${version}
    return $?
}

update() {
    cat ./charts.txt | while read line ; do
        [[ ${line} = \#* ]] &>/dev/null && continue
        chart=$(echo ${line} | cut -d: -f1)
        version=$(echo ${line} | cut -d: -f2)
        updatechart ${chart} ${version}
    done
    return $?
}

package() {
    for chartFolder in ./charts-stage/* ; do
        cd ${chartFolder}
        chart=$(basename ${chartFolder})
        updates=../../charts-updates/${chart}
        if [ -f ${updates}/values.yaml ]; then
            echo "    merging values.yaml files"
            # TODO: test this merge is fuctionaly what's required?!
            yq m -x ${updates}/values.yaml ./values.yaml > newvalues.yaml
            mv -f newvalues.yaml values.yaml
        fi
        if [ -d ${updates}/templates ]; then
            echo "    adding templates"
            cp ${updates}/templates/* templates/
        fi
        # Ensure we have at least one Application defined:
        if ! grep -R 'kind: Application' templates/ ; then
            echo "ERROR no 'Application' resource defined"
            return 1
        fi
        helm package . -d ../../charts/
        return $?
    done
}

${@}